package com.auto.mark;

import java.util.ArrayList;
import java.util.List;

import com.auto.mark.utils.MavenProjectDescriptor;

/**
 * A class representing a Maven error report, generated by a {@link MavenInvocationEngine}
 * @see MavenInvocationEngine
 */
public class MavenReport implements IReport {

	/**
	 * The MavenProjectDescriptor instance this report is about.
	 */
	private MavenProjectDescriptor projectDescriptor;

	/**
	 * The list of errors that occured during the Maven compilation phase.
	 */

	private List<String> msgList;

	/**
	 * Creates a basic Maven project's compilation report with an empty list of
	 * errors.
	 * 
	 * @param descriptor
	 *            The related Maven project to this report described by this
	 *            MavenProjectDescriptor instance
	 */
	public MavenReport(MavenProjectDescriptor descriptor) {
		this.projectDescriptor = descriptor;
		this.msgList = new ArrayList<>();
	}

	/**
	 * Creates a basic Maven project's compilation report with a given list of
	 * errors.
	 * 
	 * @param descriptor
	 *            The related Maven project to this report described by this
	 *            MavenProjectDescriptor instance
	 * @param msgList
	 *            The list of errors that occured
	 */
	public MavenReport(MavenProjectDescriptor descriptor, List<String> msgList) {
		this.projectDescriptor = descriptor;
		this.msgList = msgList;
	}

	/**
	 * Adds a new error described by a String to the error list.
	 * 
	 * @param newError
	 *            The new error to add to the error list.
	 */
	@Override
	public void addMessage(String newError) {
		this.msgList.add(newError);
	}

	/**
	 * Appends the error list with another error list.
	 * 
	 * @param errorList
	 *            The error list to append from.
	 */
	@Override
	public void addAllMessages(List<String> errorList) {
		this.msgList.addAll(errorList);
	}

	/**
	 * Empties the error list.
	 */
	@Override
	public void clearMessages() {
		this.msgList.clear();
	}

	/**
	 * @return The error list.
	 */
	@Override
	public List<String> getMessageList() {
		return this.msgList;
	}
	
	/**
	 * 
	 * @param index The index of the message in the index list.
	 * @return the message at the index.
	 */
	@Override
	public String getMessage(int index) {
		return msgList.get(index);
	}
	
	/**
	 * @return the size (in line number) of the report.
	 */
	@Override
	public int size() {
		return msgList.size();
	}

	/**
	 * @return The project this MavenErrorReport instance is about refered by a
	 *         MavenProjectDescriptor
	 */
	@Override
	public MavenProjectDescriptor getProjectDescriptor() {
		return this.projectDescriptor;
	}
	
	/**
	 * @return true if the error list is empty, false otherwise.
	 */
	@Override
	public boolean isEmpty() {
		return msgList.isEmpty();
	}
	
	/**
	 * @return true if the report contains some errors, false otherwise
	 */
	@Override
	public boolean hasContent() {
		return !isEmpty();
	}

	/**
	 * Returns a String instance that describes errors occured during the
	 * related Maven project's compilation phase.
	 */
	@Override
	public String toString() {
		
		if (msgList.isEmpty()) {
			return "";
		}

		StringBuilder msg = new StringBuilder(this.projectDescriptor.getProjectKey() + "("
				+ this.projectDescriptor.getDirectory().getPath() + ") error report: \n");

		int i = 1;
		StringBuilder sb = new StringBuilder(msg);

		for (String error : this.msgList) {
			sb.append(i + ": " + error + " \n");
			i++;
		}

		return msg.toString();
	}
}
